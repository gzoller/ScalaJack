package co.blocke.scalajack
package yaml

import org.scalatest.matchers.should.Matchers
import org.scalatest.funspec.AnyFunSpec
import scala.math.BigDecimal

class ScalaPrim() extends AnyFunSpec with Matchers {

  val sj = ScalaJack(YamlFlavor())

  describe(
    "----------------------------------\n:  Scala Primitive Tests (YAML)  :\n----------------------------------"
  ) {
    describe("+++ Positive Tests +++") {
      it("BigDecimal must work") {
        val inst = SampleBigDecimal(
          BigDecimal(123L),
          BigDecimal(1.23),
          BigDecimal(0),
          BigDecimal("123.456"),
          BigDecimal(
            "0.1499999999999999944488848768742172978818416595458984375"
          ),
          null
        )
        val yaml       = sj.render(inst)
        val comparison = """bd1: !!float '123'
                           |bd2: 1.23
                           |bd3: !!float '0'
                           |bd4: 123.456
                           |bd5: 0.1499999999999999944488848768742172978818416595458984375
                           |bd6: null""".stripMargin
        assertResult(Set.empty[String]) { yaml.split("\n").toSet.diff(comparison.split("\n").toSet) }
        assertResult(inst) {
          sj.read[SampleBigDecimal](yaml)
        }
      }
      it("BigInt must work") {
        val inst = SampleBigInt(
          BigInt("-90182736451928374653345"),
          BigInt("90182736451928374653345"),
          BigInt(0),
          null
        )
        val yaml = sj.render(inst)
        val comparison =
          """bi1: -90182736451928374653345
            |bi2: 90182736451928374653345
            |bi3: 0
            |bi4: null""".stripMargin
        assertResult(Set.empty[String]) { yaml.split("\n").toSet.diff(comparison.split("\n").toSet) }
        assertResult(inst) {
          sj.read[SampleBigInt](yaml)
        }
      }
      it("Boolean must work (not nullable)") {
        val inst = SampleBoolean(true, false)
        val yaml = sj.render(inst)
        val comparison =
          """bool1: true
            |bool2: false""".stripMargin
        assertResult(Set.empty[String]) { yaml.split("\n").toSet.diff(comparison.split("\n").toSet) }
        assertResult(inst) {
          sj.read[SampleBoolean](yaml)
        }
      }
      it("Double must work (not nullable)") {
        val inst =
          SampleDouble(Double.MaxValue, Double.MinValue, 0.0, -123.4567)
        val yaml       = sj.render(inst)
        val comparison = """d1: 1.7976931348623157E308
                           |d2: -1.7976931348623157E308
                           |d3: 0.0
                           |d4: -123.4567""".stripMargin
        assertResult(Set.empty[String]) { yaml.split("\n").toSet.diff(comparison.split("\n").toSet) }
        assertResult(inst) {
          sj.read[SampleDouble](yaml)
        }
      }
      it("Enumeration must work (not nullable)") {
        val inst =
          SampleEnum(Size.Small, Size.Medium, Size.Large, null, Size.Medium)
        val yaml       = sj.render(inst)
        val comparison = """e1: Small
                           |e2: Medium
                           |e3: Large
                           |e4: null
                           |e5: Medium""".stripMargin
        assertResult(Set.empty[String]) { yaml.split("\n").toSet.diff(comparison.split("\n").toSet) }
        // mutate e5 into an ordinal...
        val yaml2 = yaml.replace("e5: Medium", "e5: 1")
        assertResult(inst) {
          sj.read[SampleEnum](yaml2)
        }
      }
      it("Enumerations as Ints must work") {
        val sj2 = sj.enumsAsInts()
        val inst =
          SampleEnum(Size.Small, Size.Medium, Size.Large, null, Size.Medium)
        val yaml       = sj2.render(inst)
        val comparison = """e1: 0
                           |e2: 1
                           |e3: 2
                           |e4: null
                           |e5: 1""".stripMargin
        assertResult(Set.empty[String]) { yaml.split("\n").toSet.diff(comparison.split("\n").toSet) }
        assertResult(inst) {
          sj2.read[SampleEnum](yaml)
        }
      }
      it("Int must work (not nullable)") {
        val inst       = SampleInt(Int.MaxValue, Int.MinValue, 0, 123)
        val yaml       = sj.render(inst)
        val comparison = """i1: 2147483647
                           |i2: -2147483648
                           |i3: 0
                           |i4: 123""".stripMargin
        assertResult(Set.empty[String]) { yaml.split("\n").toSet.diff(comparison.split("\n").toSet) }
        assertResult(inst) {
          sj.read[SampleInt](yaml)
        }
      }
      it("Long must work (not nullable)") {
        val inst       = SampleLong(Long.MaxValue, Long.MinValue, 0L, 123L)
        val yaml       = sj.render(inst)
        val comparison = """l1: 9223372036854775807
                           |l2: -9223372036854775808
                           |l3: 0
                           |l4: 123""".stripMargin
        assertResult(Set.empty[String]) { yaml.split("\n").toSet.diff(comparison.split("\n").toSet) }
        assertResult(inst) {
          sj.read[SampleLong](yaml)
        }
      }
      it("Map of string-wrapped primitives work") {
        val inst = WrappedMaps(
          Map(3.toByte        -> 2),
          Map(1               -> 2),
          Map(5L              -> 7),
          Map(1.2             -> 3),
          Map(1.2F            -> 3),
          Map(2.toShort       -> 9),
          Map(BigInt(5)       -> 6),
          Map(BigDecimal(4.9) -> 8),
          Map(true            -> 1),
          Map('c'             -> 1)
        )
        val regex = "(.+:\\n\\s+.*)+".r
        val yaml  = sj.render(inst)

        val comparisonRaw = """g:
                              |  5: 6
                              |i:
                              |  true: 1
                              |j:
                              |  c: 1
                              |h:
                              |  4.9: 8
                              |d:
                              |  1.2: 3
                              |e:
                              |  1.2: 3
                              |f:
                              |  2: 9
                              |b:
                              |  1: 2
                              |c:
                              |  5: 7
                              |a:
                              |  3: 2""".stripMargin
        val comparison    = regex.findAllIn(comparisonRaw).toSet
        val yamlSplit     = regex.findAllIn(yaml).toSet
        assertResult(scala.collection.immutable.HashSet.empty[String]) { comparison.diff(yamlSplit) }
        assertResult(inst) {
          sj.read[WrappedMaps](yaml)
        }
      }
    }
  }
}
