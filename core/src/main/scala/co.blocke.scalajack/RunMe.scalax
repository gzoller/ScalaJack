package co.blocke.scalajack

sealed trait Vehicle
case class Truck(numberOfWheels: Int) extends Vehicle
case class Car(numberOfWheels: Int, color: String) extends Vehicle
case class Plane(numberOfEngines: Int) extends Vehicle

import scala.reflect.runtime.currentMirror
import scala.reflect.runtime.{ universe => ru }

object RunMe extends App {

  val z: Vehicle = Car(4, "red")

  val tpe = ru.typeOf[Vehicle]
  val clazz = tpe.typeSymbol.asClass
  // if you want to ensure the type is a sealed trait,
  // then you can use clazz.isSealed and clazz.isTrait
  clazz.knownDirectSubclasses.foreach(println)

  //  val valueType = currentMirror.classSymbol(z.getClass).asType
  //  println(valueType.info.baseClasses.map(bc => (bc.fullName, bc.isFinal)))

}

