# This file was automatically generated by sbt-github-actions using the
# githubWorkflowGenerate task. You should add and commit this file to
# your git repository. It goes without saying that you shouldn't edit
# this file by hand! Instead, if you wish to make changes, you should
# change your sbt build configuration to revise the workflow description
# to meet your needs, then regenerate this file.

name: Continuous Integration

on:
  pull_request:
    branches: ['**', '!update/**', '!pr/**']
  push:
    branches: ['**', '!update/**', '!pr/**']
    tags: [v*]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


concurrency:
  group: ${{ github.workflow }} @ ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        scala: [3.5.2]
        java: [temurin@21]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - name: Ignore line ending differences in git
        if: contains(runner.os, 'windows')
        shell: bash
        run: bash -c 'git config --global core.autocrlf false'

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - uses: actions/checkout@v4

      - uses: coursier/setup-action@v1

      - name: Install sbt
        shell: bash
        run: |
          cs install sbt
          echo "$HOME/.local/share/coursier/bin" >> $GITHUB_PATH
          sbt sbtVersion

      - name: Check that workflows are up to date
        shell: bash
        run: sbt githubWorkflowCheck

      - name: Test
        shell: bash
        run: sbt '++ ${{ matrix.scala }}' test

      - name: Make target directories
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        shell: bash
        run: mkdir -p target project/target

      - name: Compress target directories
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        shell: bash
        run: tar cf targets.tar target project/target

      - name: Upload target directories
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        uses: actions/upload-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-${{ matrix.scala }}
          path: targets.tar

  publish:
    name: Publish Artifacts
    needs: [build]
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    strategy:
      matrix:
        os: [ubuntu-latest]
        java: [temurin@21]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Ignore line ending differences in git
        if: contains(runner.os, 'windows')
        run: bash -c 'git config --global core.autocrlf false'

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - uses: actions/checkout@v4

      - uses: coursier/setup-action@v1

      - name: Install sbt
        run: |
          cs install sbt
          echo "$HOME/.local/share/coursier/bin" >> $GITHUB_PATH
          sbt sbtVersion

      - name: Download target directories (3.5.2)
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-3.5.2

      - name: Inflate target directories (3.5.2)
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Import signing key
        if: env.PGP_SECRET != '' && env.PGP_PASSPHRASE == ''
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        run: echo $PGP_SECRET | base64 -d -i - | gpg --import

      - name: Import signing key and strip passphrase
        if: env.PGP_SECRET != '' && env.PGP_PASSPHRASE != ''
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        run: |
          echo "$PGP_SECRET" | base64 -d -i - > /tmp/signing-key.gpg
          echo "$PGP_PASSPHRASE" | gpg --pinentry-mode loopback --passphrase-fd 0 --import /tmp/signing-key.gpg
          (echo "$PGP_PASSPHRASE"; echo; echo) | gpg --command-fd 0 --pinentry-mode loopback --change-passphrase $(gpg --list-secret-keys --with-colons 2> /dev/null | grep '^sec:' | cut --delimiter ':' --fields 5 | tail -n 1)

      - env:
          CI_SNAPSHOT_RELEASE: +publishSigned
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
        run: sbt ci-release

  dependency-submission:
    name: Submit Dependencies
    if: github.event.repository.fork == false && github.event_name != 'pull_request'
    strategy:
      matrix:
        os: [ubuntu-22.04]
        java: [temurin@21]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Ignore line ending differences in git
        if: contains(runner.os, 'windows')
        run: bash -c 'git config --global core.autocrlf false'

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - uses: actions/checkout@v4

      - uses: coursier/setup-action@v1

      - name: Install sbt
        run: |
          cs install sbt
          echo "$HOME/.local/share/coursier/bin" >> $GITHUB_PATH
          sbt sbtVersion

      - name: Submit Dependencies
        uses: scalacenter/sbt-dependency-submission@v2
        with:
          configs-ignore: test scala-tool scala-doc-tool test-internal
