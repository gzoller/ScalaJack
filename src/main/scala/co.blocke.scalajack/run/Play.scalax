package co.blocke.scalajack
package json
package run

import ScalaJack.*

case class Well(repo: scala.collection.mutable.Map[String, Int] = scala.collection.mutable.Map.empty[String, Int])

object RunMe extends App:

  import ScalaJack.*
  import co.blocke.scalajack.json.run.Record
  import co.blocke.scala_reflection.*

  given sjValidated: ScalaJack[Validated] = sjCodecOf[Validated]

  val sj_ok = """{"name":"Mike","xspot":["x","other"],"nada":""}"""
  val sj_brokenName = """{"name":"","xspot":["x","other"],"nada":""}"""
  val sj_brokenNada = """{"name":"Mike","xspot":["x","other"],"nada":"boom"}"""
  val sj_xspot = """{"name":"Mike","xspot":["nintendo","other"],"nada":""}"""

  val inst = Validated(NonEmptyString("Mike"), XList(List("x","y")), EmptyString(""))
  val ok = try( sjValidated.fromJson(sj_xspot) )
  catch {
    case jpe: JsonParseError => println(jpe.show)
  }
  println(ok)
  